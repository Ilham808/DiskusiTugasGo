// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "DiskusiTugas/domain"

	mock "github.com/stretchr/testify/mock"
)

// AnswerUsecase is an autogenerated mock type for the AnswerUsecase type
type AnswerUsecase struct {
	mock.Mock
}

// Comment provides a mock function with given fields: req
func (_m *AnswerUsecase) Comment(req *domain.AnswerCommentRequest) error {
	ret := _m.Called(req)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.AnswerCommentRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Destroy provides a mock function with given fields: id, idLogin
func (_m *AnswerUsecase) Destroy(id int, idLogin uint) error {
	ret := _m.Called(id, idLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint) error); ok {
		r0 = rf(id, idLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyComment provides a mock function with given fields: id, idComment, idLogin
func (_m *AnswerUsecase) DestroyComment(id int, idComment int, idLogin uint) error {
	ret := _m.Called(id, idComment, idLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, uint) error); ok {
		r0 = rf(id, idComment, idLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownVote provides a mock function with given fields: id, idLogin
func (_m *AnswerUsecase) DownVote(id int, idLogin uint) error {
	ret := _m.Called(id, idLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint) error); ok {
		r0 = rf(id, idLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkAsCorrect provides a mock function with given fields: id, idLogin
func (_m *AnswerUsecase) MarkAsCorrect(id int, idLogin uint) error {
	ret := _m.Called(id, idLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint) error); ok {
		r0 = rf(id, idLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: answer
func (_m *AnswerUsecase) Store(answer *domain.AnswerRequest) (domain.Answer, error) {
	ret := _m.Called(answer)

	var r0 domain.Answer
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.AnswerRequest) (domain.Answer, error)); ok {
		return rf(answer)
	}
	if rf, ok := ret.Get(0).(func(*domain.AnswerRequest) domain.Answer); ok {
		r0 = rf(answer)
	} else {
		r0 = ret.Get(0).(domain.Answer)
	}

	if rf, ok := ret.Get(1).(func(*domain.AnswerRequest) error); ok {
		r1 = rf(answer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreFile provides a mock function with given fields: req
func (_m *AnswerUsecase) StoreFile(req *domain.AnswerRequestFile) (string, error) {
	ret := _m.Called(req)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.AnswerRequestFile) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*domain.AnswerRequestFile) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.AnswerRequestFile) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpVote provides a mock function with given fields: id, idLogin
func (_m *AnswerUsecase) UpVote(id int, idLogin uint) error {
	ret := _m.Called(id, idLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint) error); ok {
		r0 = rf(id, idLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, answer
func (_m *AnswerUsecase) Update(id int, answer *domain.AnswerRequest) error {
	ret := _m.Called(id, answer)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.AnswerRequest) error); ok {
		r0 = rf(id, answer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAnswerUsecase creates a new instance of AnswerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnswerUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnswerUsecase {
	mock := &AnswerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
