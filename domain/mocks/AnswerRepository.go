// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "DiskusiTugas/domain"

	mock "github.com/stretchr/testify/mock"
)

// AnswerRepository is an autogenerated mock type for the AnswerRepository type
type AnswerRepository struct {
	mock.Mock
}

// AddUserVote provides a mock function with given fields: id, idLogin, voteType
func (_m *AnswerRepository) AddUserVote(id uint, idLogin uint, voteType int) error {
	ret := _m.Called(id, idLogin, voteType)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, int) error); ok {
		r0 = rf(id, idLogin, voteType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Comment provides a mock function with given fields: comment
func (_m *AnswerRepository) Comment(comment *domain.AnswerComment) error {
	ret := _m.Called(comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.AnswerComment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentById provides a mock function with given fields: idComment
func (_m *AnswerRepository) CommentById(idComment int) (domain.AnswerComment, error) {
	ret := _m.Called(idComment)

	var r0 domain.AnswerComment
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.AnswerComment, error)); ok {
		return rf(idComment)
	}
	if rf, ok := ret.Get(0).(func(int) domain.AnswerComment); ok {
		r0 = rf(idComment)
	} else {
		r0 = ret.Get(0).(domain.AnswerComment)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idComment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields: id
func (_m *AnswerRepository) Destroy(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyComment provides a mock function with given fields: idComment
func (_m *AnswerRepository) DestroyComment(idComment int) error {
	ret := _m.Called(idComment)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(idComment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *AnswerRepository) GetByID(id int) (domain.Answer, error) {
	ret := _m.Called(id)

	var r0 domain.Answer
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Answer, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Answer); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Answer)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuestionByID provides a mock function with given fields: id
func (_m *AnswerRepository) GetQuestionByID(id uint) (domain.Question, error) {
	ret := _m.Called(id)

	var r0 domain.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (domain.Question, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) domain.Question); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Question)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserVote provides a mock function with given fields: id, idLogin
func (_m *AnswerRepository) GetUserVote(id uint, idLogin uint) (domain.UserVote, error) {
	ret := _m.Called(id, idLogin)

	var r0 domain.UserVote
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (domain.UserVote, error)); ok {
		return rf(id, idLogin)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) domain.UserVote); ok {
		r0 = rf(id, idLogin)
	} else {
		r0 = ret.Get(0).(domain.UserVote)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, idLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: answer
func (_m *AnswerRepository) Store(answer domain.Answer) (domain.Answer, error) {
	ret := _m.Called(answer)

	var r0 domain.Answer
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Answer) (domain.Answer, error)); ok {
		return rf(answer)
	}
	if rf, ok := ret.Get(0).(func(domain.Answer) domain.Answer); ok {
		r0 = rf(answer)
	} else {
		r0 = ret.Get(0).(domain.Answer)
	}

	if rf, ok := ret.Get(1).(func(domain.Answer) error); ok {
		r1 = rf(answer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, answer
func (_m *AnswerRepository) Update(id int, answer *domain.Answer) error {
	ret := _m.Called(id, answer)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.Answer) error); ok {
		r0 = rf(id, answer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserVote provides a mock function with given fields: id, idLogin, voteType
func (_m *AnswerRepository) UpdateUserVote(id uint, idLogin uint, voteType int) error {
	ret := _m.Called(id, idLogin, voteType)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint, int) error); ok {
		r0 = rf(id, idLogin, voteType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAnswerRepository creates a new instance of AnswerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnswerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnswerRepository {
	mock := &AnswerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
