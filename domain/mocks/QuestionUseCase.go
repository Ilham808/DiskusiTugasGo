// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "DiskusiTugas/domain"

	mock "github.com/stretchr/testify/mock"
)

// QuestionUseCase is an autogenerated mock type for the QuestionUseCase type
type QuestionUseCase struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: id, idLogin
func (_m *QuestionUseCase) Destroy(id int, idLogin uint) error {
	ret := _m.Called(id, idLogin)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, uint) error); ok {
		r0 = rf(id, idLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DestroyFile provides a mock function with given fields: fileUrl
func (_m *QuestionUseCase) DestroyFile(fileUrl string) error {
	ret := _m.Called(fileUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchQuestionBySubject provides a mock function with given fields: slug, page, pageSize
func (_m *QuestionUseCase) FetchQuestionBySubject(slug string, page int, pageSize int) ([]domain.Question, int, error) {
	ret := _m.Called(slug, page, pageSize)

	var r0 []domain.Question
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]domain.Question, int, error)); ok {
		return rf(slug, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []domain.Question); ok {
		r0 = rf(slug, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int); ok {
		r1 = rf(slug, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(slug, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchWithPagination provides a mock function with given fields: page, pageSize
func (_m *QuestionUseCase) FetchWithPagination(page int, pageSize int) ([]domain.Question, int, error) {
	ret := _m.Called(page, pageSize)

	var r0 []domain.Question
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Question, int, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Question); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Question)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: id
func (_m *QuestionUseCase) GetByID(id int) (domain.Question, error) {
	ret := _m.Called(id)

	var r0 domain.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Question, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Question); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Question)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdSubject provides a mock function with given fields: slug
func (_m *QuestionUseCase) GetIdSubject(slug string) uint {
	ret := _m.Called(slug)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string) uint); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// Store provides a mock function with given fields: question
func (_m *QuestionUseCase) Store(question *domain.QuestionRequest) error {
	ret := _m.Called(question)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.QuestionRequest) error); ok {
		r0 = rf(question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreFile provides a mock function with given fields: req
func (_m *QuestionUseCase) StoreFile(req *domain.QuestionRequestFile) (string, error) {
	ret := _m.Called(req)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.QuestionRequestFile) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*domain.QuestionRequestFile) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.QuestionRequestFile) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, question
func (_m *QuestionUseCase) Update(id int, question *domain.QuestionRequest) error {
	ret := _m.Called(id, question)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *domain.QuestionRequest) error); ok {
		r0 = rf(id, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQuestionUseCase creates a new instance of QuestionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuestionUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuestionUseCase {
	mock := &QuestionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
