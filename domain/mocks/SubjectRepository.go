// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "DiskusiTugas/domain"

	mock "github.com/stretchr/testify/mock"
)

// SubjectRepository is an autogenerated mock type for the SubjectRepository type
type SubjectRepository struct {
	mock.Mock
}

// Destroy provides a mock function with given fields: id
func (_m *SubjectRepository) Destroy(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields:
func (_m *SubjectRepository) Fetch() ([]domain.Subject, error) {
	ret := _m.Called()

	var r0 []domain.Subject
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Subject, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Subject); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Subject)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *SubjectRepository) GetByID(id int) (domain.Subject, error) {
	ret := _m.Called(id)

	var r0 domain.Subject
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (domain.Subject, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) domain.Subject); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Subject)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: subject
func (_m *SubjectRepository) Store(subject *domain.Subject) error {
	ret := _m.Called(subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Subject) error); ok {
		r0 = rf(subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: subject
func (_m *SubjectRepository) Update(subject *domain.Subject) error {
	ret := _m.Called(subject)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Subject) error); ok {
		r0 = rf(subject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubjectRepository creates a new instance of SubjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubjectRepository {
	mock := &SubjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
