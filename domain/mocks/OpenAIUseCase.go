// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	domain "DiskusiTugas/domain"

	mock "github.com/stretchr/testify/mock"
)

// OpenAIUseCase is an autogenerated mock type for the OpenAIUseCase type
type OpenAIUseCase struct {
	mock.Mock
}

// GenerateAnswer provides a mock function with given fields: req
func (_m *OpenAIUseCase) GenerateAnswer(req *domain.OpenAIRequest) (*domain.OpenAIRespon, error) {
	ret := _m.Called(req)

	var r0 *domain.OpenAIRespon
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.OpenAIRequest) (*domain.OpenAIRespon, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*domain.OpenAIRequest) *domain.OpenAIRespon); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OpenAIRespon)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.OpenAIRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenAIUseCase creates a new instance of OpenAIUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenAIUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenAIUseCase {
	mock := &OpenAIUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
